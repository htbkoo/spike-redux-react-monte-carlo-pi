{"version":3,"sources":["coordinatesGenerator.ts","AppTitleBar.tsx","App.tsx","Canvas.tsx","serviceWorker.ts","index.tsx"],"names":["generateListOfCoordinates","random","Math","count","range","map","x","y","generateCoordinates","useStyles","makeStyles","theme","createStyles","appBar","zIndex","drawer","menuButton","marginRight","spacing","breakpoints","up","display","AppTitleBar","handleDrawerToggle","classes","AppBar","position","className","Toolbar","IconButton","color","aria-label","edge","onClick","Typography","variant","noWrap","root","content","flexGrow","padding","toolbar","mixins","canvas","coordinatesPairs","groupBy","coordinates","sqrt","isInCircle","inside","true","outside","false","generateData","console","log","data","asPlotData","type","mode","marker","name","layout","width","height","title","shapes","xref","yref","x0","y0","x1","y1","line","rangemode","reduce","obj","push","App","React","useState","mobileOpen","setMobileOpen","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAcO,SAASA,EAAT,GAA8H,IAAD,IAAzFC,cAAyF,MAAhFC,KAAKD,OAA2E,EAAnEE,EAAmE,EAAnEA,MAC7D,OAAOC,IAAMD,GAAOE,KAAI,kBARrB,WAA6G,IAAD,yDAAnB,GAAmB,IAA9EJ,cAA8E,MAArEC,KAAKD,OAAgE,EAC/G,MAAO,CACHK,EAAGL,IACHM,EAAGN,KAKuBO,CAAoB,CAACP,c,iECPjDQ,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,OAAQ,CACJC,OAAQH,EAAMG,OAAOC,OAAS,GAElCC,WAAW,aACPC,YAAaN,EAAMO,QAAQ,IAC1BP,EAAMQ,YAAYC,GAAG,MAAQ,CAC1BC,QAAS,cAMV,SAASC,EAAT,GAAgF,IAA1DC,EAAyD,EAAzDA,mBAC3BC,EAAUf,IAEhB,OACI,kBAACgB,EAAA,EAAD,CAAQC,SAAS,QAAQC,UAAWH,EAAQX,QACxC,kBAACe,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAM,UACNC,aAAW,cACXC,KAAK,QACLC,QAASV,EACTI,UAAWH,EAAQR,YAEnB,kBAAC,IAAD,OAEJ,kBAACkB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,GAA/B,oBC5BhB,IAAM3B,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTyB,KAAM,CACFhB,QAAS,QAEbiB,QAAS,CACLC,SAAU,EACVC,QAAS7B,EAAMO,QAAQ,IAE3BuB,QAAS9B,EAAM+B,OAAOD,aAIxBE,EAAU,mBChBD,WAAmB,IAAD,EA8C7B,YAA0G,IAChGC,EAAmB5C,EAA0B,CAACG,MADiD,EAAlFA,QAAkF,EAE9D0C,IAAQD,GAAkB,SAAAE,GAAW,OHpC7E,YAA4E,IAAD,IAAtDA,YAAcxC,EAAwC,EAAxCA,EAAGC,EAAqC,EAArCA,EAEzC,OAAOL,KAAK6C,KAAKzC,EAAIA,EAAIC,EAAIA,GADd,EGmCqEyC,CAAW,CAACF,mBAA/EG,EAFwF,EAE9FC,KAAqBC,EAFyE,EAEhFC,MAErB,MAAO,CAACH,SAAQE,WAjDME,CAAa,CAAClD,MAAO,MAAxC8C,EADsB,EACtBA,OAAQE,EADc,EACdA,QAEf,OADAG,QAAQC,IAAIN,GAER,kBAAC,IAAD,CACIO,KAAM,CAAC,eAEIC,EAAWR,GAFhB,CAGES,KAAM,UACNC,KAAM,UACNC,OAAQ,CAAC9B,MAAO,QAChB+B,KAAM,WANR,eASKJ,EAAWN,GAThB,CAUEO,KAAM,UACNC,KAAM,UACNC,OAAQ,CAAC9B,MAAO,OAChB+B,KAAM,aAGdC,OAAQ,CACJC,MAAO,IACPC,OAAQ,IACRC,MAAO,oEACPC,OAAQ,CACJ,CACIR,KAAM,SACNS,KAAM,IACNC,KAAM,IAENC,IAAK,EACLC,IAAK,EACLC,GAAI,EACJC,GAAI,EACJC,KAAM,CACF3C,MAAO,eAInB,MAAS,CAAC,YAAc,EAAM4C,UAAW,eACzC,MAAS,CAAC,YAAc,EAAMA,UAAW,kBAYrD,SAASjB,EAAWb,GAChB,OAAOA,EAAiB+B,QAAO,SAACC,EAAK9B,GAGjC,OAFA8B,EAAItE,EAAEuE,KAAK/B,EAAYxC,GACvBsE,EAAIrE,EAAEsE,KAAK/B,EAAYvC,GAChBqE,IACR,CAACtE,EAAG,GAAgBC,EAAG,QD1ClB,MA0BDuE,EAxBO,WAClB,IAAMtD,EAAUf,IADQ,EAEYsE,IAAMC,UAAS,GAF3B,mBAEjBC,EAFiB,KAELC,EAFK,KAQxB,OACI,yBAAKvD,UAAU,OACX,yBAAKA,UAAWH,EAAQa,MACpB,kBAAC8C,EAAA,EAAD,MAEA,kBAAC7D,EAAD,CAAaC,mBATE,WACvB2D,GAAeD,MAUP,0BAAMtD,UAAWH,EAAQc,SACrB,yBAAKX,UAAWH,EAAQiB,UACvBE,ME7BDyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5b973c5a.chunk.js","sourcesContent":["import range from \"lodash/range\";\r\n\r\nexport interface MyCoordinates {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nexport function generateCoordinates({random = Math.random}: Partial<{ random: () => number }> = {}): MyCoordinates {\r\n    return {\r\n        x: random(),\r\n        y: random(),\r\n    }\r\n}\r\n\r\nexport function generateListOfCoordinates({random = Math.random, count}: { random?: () => number, count: number }): MyCoordinates[] {\r\n    return range(count).map(() => generateCoordinates({random}));\r\n}\r\n\r\nexport function isInCircle({coordinates: {x, y}}: { coordinates: MyCoordinates }) {\r\n    const radius = 1;\r\n    return Math.sqrt(x * x + y * y) < radius;\r\n}\r\n","import React from \"react\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function AppTitleBar({handleDrawerToggle}: { handleDrawerToggle: () => void }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar position=\"fixed\" className={classes.appBar}>\r\n            <Toolbar>\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    edge=\"start\"\r\n                    onClick={handleDrawerToggle}\r\n                    className={classes.menuButton}\r\n                >\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Monte Carlo Pi\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}","import React from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport './App.css';\r\n\r\nimport Canvas from \"./Canvas\";\r\nimport AppTitleBar from \"./AppTitleBar\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            padding: theme.spacing(3),\r\n        },\r\n        toolbar: theme.mixins.toolbar,\r\n    }),\r\n);\r\n\r\nconst canvas = (<Canvas />); // to avoid re-rendering due to state change\r\n\r\nconst App: React.FC = () => {\r\n    const classes = useStyles();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n\r\n                <AppTitleBar handleDrawerToggle={handleDrawerToggle} />\r\n\r\n                <main className={classes.content}>\r\n                    <div className={classes.toolbar} />\r\n                    {canvas}\r\n                </main>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport groupBy from 'lodash/groupBy';\r\n\r\nimport Plot from 'react-plotly.js';\r\nimport {generateListOfCoordinates, isInCircle, MyCoordinates} from \"./coordinatesGenerator\";\r\n\r\nexport default function Canvas() {\r\n    const {inside, outside} = generateData({count: 1000});\r\n    console.log(inside);\r\n    return (\r\n        <Plot\r\n            data={[\r\n                {\r\n                    ...asPlotData(inside),\r\n                    type: 'scatter',\r\n                    mode: 'markers',\r\n                    marker: {color: 'blue'},\r\n                    name: \"inside\",\r\n                },\r\n                {\r\n                    ...asPlotData(outside),\r\n                    type: 'scatter',\r\n                    mode: 'markers',\r\n                    marker: {color: 'red'},\r\n                    name: \"outside\",\r\n                },\r\n            ]}\r\n            layout={{\r\n                width: 800,\r\n                height: 800,\r\n                title: 'Trying to demonstrate estimation of Pi with Monte Carlo algorithm',\r\n                shapes: [\r\n                    {\r\n                        type: 'circle',\r\n                        xref: 'x',\r\n                        yref: 'y',\r\n                        // fillcolor: 'lightblue',\r\n                        x0: -1,\r\n                        y0: -1,\r\n                        x1: 1,\r\n                        y1: 1,\r\n                        line: {\r\n                            color: 'lightblue'\r\n                        }\r\n                    },\r\n                ],\r\n                \"xaxis\": {\"fixedrange\": true, rangemode: \"nonnegative\"},\r\n                \"yaxis\": {\"fixedrange\": true, rangemode: \"nonnegative\"},\r\n            }}\r\n        />\r\n    );\r\n\r\n    function generateData({count}: { count: number }): { inside: MyCoordinates[], outside: MyCoordinates[] } {\r\n        const coordinatesPairs = generateListOfCoordinates({count});\r\n        const {true: inside, false: outside} = groupBy(coordinatesPairs, coordinates => isInCircle({coordinates}));\r\n\r\n        return {inside, outside};\r\n    }\r\n\r\n    function asPlotData(coordinatesPairs: MyCoordinates[]): { x: number[], y: number[] } {\r\n        return coordinatesPairs.reduce((obj, coordinates) => {\r\n            obj.x.push(coordinates.x);\r\n            obj.y.push(coordinates.y);\r\n            return obj;\r\n        }, {x: [] as number[], y: [] as number[]})\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}